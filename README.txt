# h2b2
Convert hex to binary with h2b2, a simple lookup table program with piped input.
h2b2 <<< 7975700a

Or you could just try to send things to it:

/your/things/and/stuff | h2b2

Example with output:

openssl rand -hex 128 | h2b2




But it will segfault if you put too much in at once:

openssl rand -hex 1005 | h2b2
Segmentation fault

1004 is the max that can be used in that scenario.
This limit is intentionally coded into the program. Modify as desired if you need larger numbers.
Chunking the hex input if larger than 1000 is the intended design there.
Example of a larger data set being chunked up into pieces for h2b2.
openssl rand -hex 9999999999 | fold -c1000 | while read line; do echo $line | h2b2; done
